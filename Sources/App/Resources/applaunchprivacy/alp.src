/**
 This program is free software: you can redistribute it and/or modify
 it under the terms of the GNU Affero General Public License as
 published by the Free Software Foundation, either version 3 of the
 License, or (at your option) any later version.

 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Affero General Public License for more details.

 You should have received a copy of the GNU Affero General Public License
 along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

//
// This tool is part of the App Fair's “App Launch Privacy”.
//
// It modifies the /etc/hosts file on the host machine
// to redirect traffic intended for ocsp.apple.com and ocsp2.apple.com
// to localhost, thereby blocking the tracking of app launches.
// These servers (presumably) implement Online Certificate Status Protocol
// in order to check for the revocation of signing certificates.
// While this is a positive security feature, the down-side is that
// all app launches are reported to third-parties, who may be
// intercepted or compromised.
//
// This script can be run directly as root with:
//
//   sudo swift main.swift enable
//
// It can also be compiled to a binary, which can then have
// the setuid bit set on it so as to enable running by a non-root user,
// which enables running the tool without elevated priviliges.
// It can be bundled base64 encoded to avoid needing the hardened runtime
// with the command:
//
//   swift build -c release --arch arm64 --arch x86_64 && cat ./.build/apple/Products/Release/applaunchprivacy | base64 -o ../applaunchprivacy.b64
//
// Usage:
//
// enable: modifies the /etc/hosts to block ocsp.apple.com
// disable: removes the blocking from /etc/hosts
//
// For more details, see: https://appfair.app
//
//import Darwin
//import Foundation
//
//let cmdname = CommandLine.arguments.first ?? "command"
//
//// this tool accepts a single argument: "enable" or "disable"
//let flag = CommandLine.arguments.dropFirst().first
//
//// a single entry for each host we need to block
//let hostBlocks = [
//    """
//
//    # begin appfair.app launch telemetry blocking
//    127.0.0.1 ocsp.apple.com
//    # end appfair.app launch telemetry blocking
//
//    """,
//
//    """
//
//    # begin appfair.app launch telemetry blocking
//    127.0.0.1 ocsp2.apple.com
//    # end appfair.app launch telemetry blocking
//
//    """,
//
//]
//
//let etchosts = try String(contentsOfFile: "/etc/hosts", encoding: .utf8)
//var modhosts = etchosts
//
//// always clear out our existing blocks; if the argument is "enable", they will be re-added
//for hostBlock in hostBlocks {
//    modhosts = modhosts.replacingOccurrences(of: hostBlock, with: "")
//}
//
//let hostsChanged = modhosts != etchosts
//
//if flag == "disable" {
//    if hostsChanged {
//        try updateHosts() // save the unblocked hosts file
//    }
//} else if flag == "enable" {
//    // append each block to the hosts file
//    for hostBlock in hostBlocks {
//        modhosts.append(contentsOf: hostBlock)
//    }
//    try updateHosts()
//} else {
//    print("App launch privacy is currently", hostsChanged ? "enabled" : "disabled")
//    if hostsChanged {
//        print("Run", cmdname, "disable", "to deactivate")
//    } else {
//        print("Run", cmdname, "enable", "to activate")
//    }
//}
//
//func updateHosts(flushDNSCache: Bool = true) throws {
//    try modhosts.write(toFile: "/etc/hosts", atomically: true, encoding: .utf8)
//
//    if flushDNSCache {
//        // sending a hangup signal to mDNSResponder will flush the DNS cache
//        let _ = sendSignal(SIGHUP, to: "mDNSResponder")
//    }
//}
//
///// Sends a signal to the the named process
///// - Parameters:
/////   - process: the process name to search for
/////   - signal: the signal to send to the process
///// - Returns: true if the signal was successfully sent
//public func sendSignal(_ signal: Int32, to process: String) -> Bool {
//    var done = false
//    var result: [kinfo_proc]?
//    var err: Int32
//
//    repeat {
//        let name = [CTL_KERN, KERN_PROC, KERN_PROC_ALL, 0];
//        let nmptr = name.withUnsafeBufferPointer {
//            UnsafeMutablePointer<Int32>(mutating: $0.baseAddress)
//        }
//        var length: Int = 0
//        err = sysctl(nmptr, u_int(name.count), nil, &length, nil, 0)
//        if err == -1 {
//            err = errno
//        }
//
//        if err == 0 {
//            let count = length / MemoryLayout<kinfo_proc>.stride
//            result = [kinfo_proc](repeating: kinfo_proc(), count: count)
//            err = result!.withUnsafeMutableBufferPointer({ ( p: inout UnsafeMutableBufferPointer<kinfo_proc>) -> Int32 in
//                return sysctl(nmptr, u_int(name.count), p.baseAddress, &length, nil, 0)
//            })
//            switch err {
//            case 0: done = true
//            case -1: err = errno
//            case ENOMEM: err = 0
//            default: fatalError()
//            }
//        }
//    } while err == 0 && !done
//
//    for proc in result ?? [] {
//        let nm = proc.kp_proc.p_comm
//        let pname = String(cString: [nm.0, nm.1, nm.2, nm.3, nm.4, nm.5, nm.6, nm.7, nm.8, nm.9, nm.10, nm.11, nm.12, nm.13, nm.14, nm.15, nm.16])
//        if pname == process {
//            return Darwin.kill(proc.kp_proc.p_pid, signal) == 0
//        }
//    }
//
//    return false // no process found
//}
